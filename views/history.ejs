<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Energy Ease - Riwayat Data</title>
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');
      :root {
        --primary-color: #3498db;
        --secondary-color: #2c3e50;
        --background-color: #f4f7f9;
        --card-bg-color: #ffffff;
        --text-color: #555;
        --light-text: #bdc3c7;
        --border-color: #e0e6ed;
        --shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
      }
      body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--background-color);
        margin: 0;
        display: flex;
        min-height: 100vh;
        color: var(--text-color);
        margin-left: 280px;
      }
      .main-content {
        flex: 1;
        padding: 30px;
        overflow-y: auto;
      }
      .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
      }
      .header h1 {
        font-size: 32px;
        font-weight: 600;
        color: var(--secondary-color);
        margin: 0;
      }
      .history-card {
        background-color: var(--card-bg-color);
        border-radius: 12px;
        padding: 30px;
        box-shadow: var(--shadow);
        margin-bottom: 25px;
      }
      .history-card .card-header {
        font-size: 22px;
        font-weight: 600;
        color: var(--secondary-color);
        margin-bottom: 20px;
        border-bottom: 2px solid var(--border-color);
        padding-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .filter-controls input[type='date'] {
        padding: 8px 12px;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-family: 'Poppins', sans-serif;
        box-sizing: border-box;
      }
      .history-table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
      }
      .history-table th,
      .history-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
      }
      .history-table th {
        background-color: var(--background-color);
        font-weight: 600;
        color: var(--secondary-color);
        text-transform: uppercase;
      }
      .history-table tr:hover {
        background-color: #f9f9f9;
      }
      .chart-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 25px;
      }
      .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
        overflow: hidden;
      }
      .chart-container canvas {
        width: 100% !important;
        height: 100% !important;
        display: block;
      }
      @media (max-width: 768px) {
        .chart-grid {
          grid-template-columns: 1fr;
        }
        .chart-container {
          height: 250px;
        }
      }
    </style>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- ✅ pakai baseUrl -->
    <script src="<%= baseUrl %>/socket.io/socket.io.js"></script>
  </head>
  <body>
    <!-- ✅ partials ikut baseUrl -->
    <%- include('partials/sidebar', { activePage: 'history', baseUrl: baseUrl }) %>

    <div class="main-content">
      <div class="header">
        <h1>Riwayat Data</h1>
        <%- include('partials/logout', { baseUrl: baseUrl }) %>
      </div>

      <div class="history-card">
        <div class="card-header">
          <div>Riwayat Data Lengkap</div>
          <div class="filter-controls">
            <input type="date" id="filter-date" />
          </div>
        </div>
        <div style="overflow-x: auto">
          <table class="history-table">
            <thead>
              <tr>
                <th>Waktu</th>
                <th>Energi Aktif (kWh)</th>
                <th>Daya Aktif (W)</th>
                <th>Energi Reaktif (kVARh)</th>
                <th>Daya Reaktif (VAR)</th>
                <th>Faktor Daya</th>
              </tr>
            </thead>
            <tbody id="dataTableBody"></tbody>
          </table>
        </div>
      </div>

      <div class="history-card">
        <div class="card-header">Visualisasi Data</div>
        <div class="chart-grid">
          <div class="chart-container"><canvas id="energiChart"></canvas></div>
          <div class="chart-container"><canvas id="dayaChart"></canvas></div>
          <div class="chart-container"><canvas id="energiReaktifChart"></canvas></div>
          <div class="chart-container"><canvas id="dayaReaktifChart"></canvas></div>
          <div class="chart-container"><canvas id="pfChart"></canvas></div>
        </div>
      </div>
    </div>

    <script>
      let energiChart, dayaChart, energiReaktifChart, dayaReaktifChart, pfChart;
      const socket = io(window.location.origin, {
        path: '<%= baseUrl %>/socket.io/',
      });

      let currentHourData = null;

      async function fetchData(date) {
        try {
          const response = await fetch(`<%= baseUrl %>/api/history?date=${date}`);
          return await response.json();
        } catch (error) {
          console.error('Failed to fetch historical data:', error);
          return [];
        }
      }

      function updateTableAndCharts(dataArray) {
        const tableBody = document.getElementById('dataTableBody');
        tableBody.innerHTML = '';

        dataArray.forEach((d) => {
          const tr = document.createElement('tr');
          const time = new Date(d.start_time || d.timestamp).toLocaleTimeString(
            'id-ID',
            { hour: '2-digit', minute: '2-digit' }
          );
          tr.innerHTML = `
            <td>${time}</td>
            <td>${(d.avg_energy_active || d.energyActive).toFixed(2)}</td>
            <td>${(d.avg_power_active_total || d.powerActiveTotal).toFixed(2)}</td>
            <td>${(d.avg_energy_reactive || d.energyReactive || 0).toFixed(2)}</td>
            <td>${(d.avg_power_reactive_total || d.powerReactiveTotal || 0).toFixed(2)}</td>
            <td>${(d.avg_total_power_factor || d.totalPowerFactor).toFixed(2)}</td>
          `;
          tableBody.appendChild(tr);
        });

        const labels = dataArray.map((d) =>
          new Date(d.start_time || d.timestamp).toLocaleTimeString('id-ID', {
            hour: '2-digit',
            minute: '2-digit',
          })
        );
        const energiData = dataArray.map((d) => d.avg_energy_active || d.energyActive);
        const dayaData = dataArray.map((d) => d.avg_power_active_total || d.powerActiveTotal);
        const energiReaktifData = dataArray.map((d) => d.avg_energy_reactive || d.energyReactive || 0);
        const dayaReaktifData = dataArray.map((d) => d.avg_power_reactive_total || d.powerReactiveTotal || 0);
        const pfData = dataArray.map((d) => d.avg_total_power_factor || d.totalPowerFactor);

        if (energiChart) energiChart.destroy();
        if (dayaChart) dayaChart.destroy();
        if (energiReaktifChart) energiReaktifChart.destroy();
        if (dayaReaktifChart) dayaReaktifChart.destroy();
        if (pfChart) pfChart.destroy();

        energiChart = new Chart(document.getElementById('energiChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Energi Aktif (kWh)', data: energiData, borderColor: '#3498db', backgroundColor: 'rgba(52,152,219,0.2)', fill: true, tension: 0.4 }] },
          options: { responsive: true, maintainAspectRatio: false },
        });

        dayaChart = new Chart(document.getElementById('dayaChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Daya Aktif (W)', data: dayaData, borderColor: '#2ecc71', backgroundColor: 'rgba(46,204,113,0.2)', fill: true, tension: 0.4 }] },
          options: { responsive: true, maintainAspectRatio: false },
        });

        energiReaktifChart = new Chart(document.getElementById('energiReaktifChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Energi Reaktif (kVARh)', data: energiReaktifData, borderColor: '#9b59b6', backgroundColor: 'rgba(155,89,182,0.2)', fill: true, tension: 0.4 }] },
          options: { responsive: true, maintainAspectRatio: false },
        });

        dayaReaktifChart = new Chart(document.getElementById('dayaReaktifChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Daya Reaktif (VAR)', data: dayaReaktifData, borderColor: '#e74c3c', backgroundColor: 'rgba(231,76,60,0.2)', fill: true, tension: 0.4 }] },
          options: { responsive: true, maintainAspectRatio: false },
        });

        pfChart = new Chart(document.getElementById('pfChart'), {
          type: 'line',
          data: { labels, datasets: [{ label: 'Faktor Daya', data: pfData, borderColor: '#f39c12', backgroundColor: 'rgba(243,156,18,0.2)', fill: true, tension: 0.4 }] },
          options: { responsive: true, maintainAspectRatio: false },
        });
      }

      async function updateData(selectedDate) {
        const hourlyData = await fetchData(selectedDate);
        let combinedData = [...hourlyData];

        if (currentHourData) {
          const currentHourDate = new Date().toISOString().split('T')[0];
          if (currentHourDate === selectedDate) {
            combinedData.push({
              start_time: new Date(),
              avg_energy_active: currentHourData.avgEnergyActive,
              avg_power_active_total: currentHourData.avgPowerActiveTotal,
              avg_energy_reactive: currentHourData.avgEnergyReactive || 0,
              avg_power_reactive_total: currentHourData.avgPowerReactiveTotal || 0,
              avg_total_power_factor: currentHourData.avgTotalPowerFactor,
            });
          }
        }
        updateTableAndCharts(combinedData);
      }

      socket.on('real-time-hourly-data', (data) => {
        currentHourData = data;
        const dateInput = document.getElementById('filter-date');
        updateData(dateInput.value);
      });

      socket.on('hourly-data-updated', () => {
        const dateInput = document.getElementById('filter-date');
        updateData(dateInput.value);
      });

      document.addEventListener('DOMContentLoaded', () => {
        const dateInput = document.getElementById('filter-date');
        const today = new Date().toISOString().split('T')[0];
        dateInput.value = today;
        updateData(today);

        dateInput.addEventListener('change', (event) => {
          updateData(event.target.value);
        });
      });
    </script>
  </body>
</html>
